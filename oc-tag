#!/bin/sh
# This short script tags the CURRENT version of an image to the provided <tag-name>
# 

function help {
  echo "Usage:"
  echo " oc-tag [-i <source-project>] [-s <image-stream-name>] -t <tag-name> [-o <target-project>] [-q <source-tag>] "
  echo ""
  echo "Tags the ImageStream of the <source-project> with <tag-name> in the <target-project>"
  echo "  if -i is omitted, the current working project will be used"
  echo "  if -o is omitted, the current working project will be used"
  echo "  if -s is omitted, the first image stream will be used"
  echo "  if -q is given, the <source-tag> tagged version is used to tag" 
  echo ""
  echo "  -i, --source-project    specify the source project to use or the current if omitted"
  echo "  -s, --image-stream-name specify the name of the image stream or the first one if omitted "
  echo "  -t, --tag-name          specify the name of the tag to use"
  echo "  -o, --target-project    specify the name of the target project or use the current if omitted "
  echo "  -q, --source-tag        specify the name of the source tag  "
  echo ""
}

TAG_NAME=""
SOURCE_PROJECT=""
TARGET_PROJECT=""
IMAGE_STREAM=""
SOURCE_TAG=""

function tagImage {
	if [[ $TAG_NAME == "" ]]; then
		echo "ERROR! you have to specify -t <tag-name>"
		help
		return 1
	fi

	if [[ $SOURCE_PROJECT == "" ]]; then
		SOURCE_PROJECT=$(oc project -q)
	fi

	if [[ $TARGET_PROJECT == "" ]]; then
		TARGET_PROJECT=$(oc project -q)
	fi

	if [[ $IMAGE_STREAM == "" ]]; then
		IMAGE_STREAM=$(oc get is -o custom-columns=NAME:.metadata.name | tail -n 1)
		echo "Image Stream name not given. Using '$IMAGE_STREAM'..."
	fi
	
	if [[ $SOURCE_TAG == "" ]]; then
		echo "Tagging 'latest' image stream '$IMAGE_STREAM' from '$SOURCE_PROJECT' to target project '$TARGET_PROJECT' with tag '$TAG_NAME'..."
	
		# getting imagestream ID
		# this algorythm is just taking the FIRST entry of the line starting with a '*'
		imageID=$(oc describe is $IMAGE_STREAM | grep \* | awk -F$'/' '{print $3}' | head -n 1)
		imageID="$SOURCE_PROJECT/"$imageID
	
		#echo "oc tag $imageID $TARGET_PROJECT/$IMAGE_STREAM:$TAG_NAME "
		oc tag $imageID $TARGET_PROJECT/$IMAGE_STREAM:$TAG_NAME
	else
		echo "Tagging '$SOURCE_TAG' image stream '$IMAGE_STREAM' from '$SOURCE_PROJECT' to target project '$TARGET_PROJECT' with tag '$TAG_NAME'..."
		
		oc tag $SOURCE_PROJECT/$IMAGE_STREAM:$SOURCE_TAG $TARGET_PROJECT/$IMAGE_STREAM:$TAG_NAME
	fi
	
	if [[ $SOURCE_PROJECT != $TARGET_PROJECT ]]; then
		echo "Source project != target project. Tagging image stream in target project to $TAG_NAME"
		oc project $TARGET_PROJECT
		oc label is $IMAGE_STREAM APP_VERSION=$TAG_NAME --overwrite
		oc project $SOURCE_PROJECT
		
		if [[ $SOURCE_TAG != "" ]]; then
			echo "Source project != target project. Tagging image stream in target project to $SOURCE_TAG"			
			oc tag $TARGET_PROJECT/$IMAGE_STREAM:$TAG_NAME $TARGET_PROJECT/$IMAGE_STREAM:$SOURCE_TAG
		fi
		
	else
		oc label is $IMAGE_STREAM APP_VERSION=$TAG_NAME --overwrite
	fi
}

# Use -gt 1 to consume two arguments per pass in the loop (e.g. each
# argument has a corresponding value to go with it).
# Use -gt 0 to consume one or more arguments per pass in the loop (e.g.
# some arguments don't have a corresponding value to go with it such
# as in the --default example).
__PLATFORM='unknown'
__UNAMESTR=$(uname)
__GETOPT='getopt'

if [[ "$__UNAMESTR" == 'Linux' ]]; then
   __PLATFORM='linux'
elif [[ "$__UNAMESTR" == 'Darwin' ]]; then
   __PLATFORM='macosx'
fi

# Platform unknown
if [[ "$__PLATFORM" == "unknown" ]]; then
  echo "Unknown platform: script should exit" && exit 1
fi

if [[ "$__PLATFORM" == "macosx" ]]; then  
  if [ -f /usr/local/opt/gnu-getopt/bin/getopt ] ; then
	  __GETOPT='/usr/local/opt/gnu-getopt/bin/getopt'  
  else 
  	  echo "Please make sure you have installed gnu-getopt via brew"
	  echo "   brew install gnu-getopt"
	  exit 1;
  fi
fi


args=$($__GETOPT -o i:s:t:o:q: --long source-project:,image-stream-name:,tag-name:,target-project:,source-tag: -u -- "$@")

if [ $? != 0 ]
	then
        help
        exit 2
fi
set -- $args

for i 
do
	case "$i" in
		-i|--source-project)
			SOURCE_PROJECT=$2
			shift; shift;;
		-t|--tag-name)
			TAG_NAME=$2
			shift; shift;;
		-s|--image-stream-name)
			IMAGE_NAME=$2
			shift; shift;;
        -o|--target-project)
			TARGET_PROJECT=$2
			shift; shift;;			
	    -q|--source-tag)
			SOURCE_TAG=$2
			shift; shift;;			

	    --) shift ; break ;;		
	esac	
done

echo ""
echo ""

#echo "SOURCE_PROJECT = $SOURCE_PROJECT"
#echo "TARGET_PROJECT = $TARGET_PROJECT"
#echo "IMAGE_NAME = $IMAGE_NAME"
#echo "TAG_NAME = $TAG_NAME"


tagImage
